name: 'Docker - Multi-Arch Build'
description: 'Build docker image which supports multi-architecture, if desired'
inputs:
  architectures:
    description: 'A CSV list of the architectures to build the docker image for'
    required: false
    default: 'linux/amd64,linux/arm64/v8'
  buildArgs:
    description: 'A list of build arguments to pass to the build context'
    required: false
    default: ''
  context:
    description: 'The context directory to pass to the build. Default: .'
    required: false
    default: '.'
  dockerfile:
    description: 'The Dockerfile that you wish to build. Default: ./Dockerfile'
    required: false
    default: './Dockerfile'
  pushImagesOnComplete:
    description: 'Whether or not to push the docker images after the build completes. Default: false'
    required: false
    default: 'false'
  tags:
    description: 'A comma separated list of tags that you want to build.'
    required: false
    default: 'test'
  token:
    description: 'The Github token that is used to publish the container images'
    required: false
    default: ${{ secrets.GITHUB_TOKEN }}
runs:
  using: 'composite'
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@master
      with:
        platforms: ${{ inputs.architectures }}
    - uses: docker/setup-buildx-action@v2
      with:
        install: true
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: buildx-${{ hashFiles(inputs.dockerfile, inputs.context) }}
        restore-keys: |
          buildx-
    - name: Github Packages Login
      uses: docker/login-action@v2
      if: ${{ inputs.pushImagesOnComplete == 'true' }}
      with: 
        registry: 'ghcr.io'
        username: ${{ github.actor }}
        password: ${{ inputs.token }}
    - name: Build
      uses: docker/build-push-action@v3
      with:
        build-args: ${{ inputs.buildArgs }}
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        outputs: type=image
        platforms: ${{ inputs.architectures }}
        push: ${{ inputs.pushImagesOnComplete }}
        tags: ${{ inputs.tags }}