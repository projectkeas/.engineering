name: 'GoLang - Build'
description: 'Builds multiple versions of a Go service complete with test coverage'
inputs:
  appName:
    description: The name of the application that's being built
    required: true
  architectures:
    description: 'A CSV list of the architectures to build the docker image for'
    required: false
    default: 'linux/amd64,linux/arm64'
  checkForLatestVersion:
    description: 'Check to see whether the version of Go to use is the latest version and download if appropriate'
    required: false
    default: 'true'
  cosignPublicKey:
    description: 'The public key used to verify the signed container'
    required: false
    default: ''
  cosignPrivateKeyPassword:
    description: 'The password to unlock the signing private key'
    required: false
    default: ''
  outputDirectory:
    description: 'The directory of the binaries that are built'
    required: false
    default: './out'
  version:
    description: 'The version of Go to use'
    required: false
    default: '1.18.2'

runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.version }}
        check-latest: ${{ inputs.checkForLatestVersion }}

    - name: Cache Go Modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Verify dependencies
      shell: bash
      run: |
        for i in $(echo ${{ inputs.architectures }} | tr "," "\n")
        do
          echo "::group::Running 'go mod' for '$i'"
          GOOS=${i%/*} GOARCH=${i#*/} go mod tidy
          GOOS=${i%/*} GOARCH=${i#*/} go mod verify
          echo "::endgroup::"
        done

    - name: Build
      shell: bash
      run: |
        for i in $(echo ${{ inputs.architectures }} | tr "," "\n")
        do
          echo "::group::Running 'go build' for '$i'"
          os=${i%/*}
          arch=${i#*/}
          echo "Building '${{ inputs.outputDirectory }}/${{ inputs.appName }}-$os-$arch'..."
          GOOS=$os GOARCH=$arch go build -o ${{ inputs.outputDirectory }}/${{ inputs.appName }}-$os-$arch
          echo "::endgroup::"
        done
        ls ${{ inputs.outputDirectory }}

    - name: Run go vet
      shell: bash
      run: |
        for i in $(echo ${{ inputs.architectures }} | tr "," "\n")
        do
          echo "::group::Running 'go vet' for '$i'"
          GOOS=${i%/*} GOARCH=${i#*/} go vet
          echo "::endgroup::"
        done

    - name: Run StaticCheck
      uses: dominikh/staticcheck-action@v1.3.1
      with:
        version: latest
        install-go: false

    - name: Run tests
      shell: bash
      run: |
        for i in $(echo ${{ inputs.architectures }} | tr "," "\n")
        do
          echo "::group::Running 'test vet' for '$i'"
          GOOS=${i%/*} GOARCH=${i#*/} go test
          echo "::endgroup::"
        done

    - name: Create & Verify SBOM
      shell: bash
      run: |
        echo "Creating Software Bill of Materials (SBOM)..."
        syft packages dir:. -o spdx-json > ${{inputs.outputDirectory}}/${{ inputs.appName }}.sbom.json

        echo "Verifying dependencies..."
        grype sbom:${{inputs.outputDirectory}}/${{ inputs.appName }}.sbom.json -q --add-cpes-if-none --fail-on critical --scope AllLayers -o json > ${{inputs.outputDirectory}}/${{ inputs.appName }}.vulnerabilities.json

    - name: Sign Artefacts
      if: ${{ inputs.cosignPrivateKeyPassword != '' && inputs.cosignPublicKey != '' }}
      shell: bash
      working-directory: ${{ inputs.outputDirectory }}
      env:
        COSIGN_PASSWORD: ${{ inputs.cosignPrivateKeyPassword }}
        COSIGN_PUBLIC_KEY: ${{ inputs.cosignPublicKey }}
      run: |
        for filename in ./* ; do
          [ -e "$filename" ] || continue
          cosign sign-blob --key ../cosign.key --output-signature "$filename.sig" --output-certificate "$filename.pem" $filename 
          cosign verify-blob --key env://COSIGN_PUBLIC_KEY --signature "$filename.sig" $filename
        done