name: 'GoLang - Build'
description: 'Builds multiple versions of a Go service complete with test coverage'
inputs:
  appName:
    description: The name of the application that's being built
    required: true
  architectures:
    description: 'A CSV list of the architectures to build the docker image for'
    required: false
    default: 'linux/amd64,linux/arm64'
  checkForLatestVersion:
    description: 'Check to see whether the version of Go to use is the latest version and download if appropriate'
    required: false
    default: 'true'
  outputDirectory:
    description: 'The directory of the binaries that are built'
    required: false
    default: './out'
  version:
    description: 'The version of Go to use'
    required: false
    default: '1.18.1'

runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.version }}
        check-latest: ${{ inputs.checkForLatestVersion }}

    # - name: Cache Go Modules
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/go/pkg/mod
    #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
    #     restore-keys: |
    #       ${{ runner.os }}-go-

    # - name: Verify dependencies
    #   shell: bash
    #   run: |
    #     for i in $(echo ${{ inputs.architectures }} | tr "," "\n")
    #     do
    #       echo "::group::Running 'go mod' for '$i'"
    #       GOOS=${i%/*} GOARCH=${i#*/} go mod tidy
    #       GOOS=${i%/*} GOARCH=${i#*/} go mod verify
    #       echo "::endgroup::"
    #     done

    - name: Build
      shell: bash
      run: |
        for i in $(echo ${{ inputs.architectures }} | tr "," "\n")
        do
          echo "::group::Running 'go build' for '$i'"
          os=${i%/*}
          arch=${i#*/}
          echo "Building '${{ inputs.outputDirectory }}/${{ inputs.appName }}-$os-$arch'..."
          GOOS=$os GOARCH=$arch go build -o ${{ inputs.outputDirectory }}/${{ inputs.appName }}-$os-$arch
          echo "::endgroup::"
        done
        ls ${{ inputs.outputDirectory }}

    # - name: Run go vet
    #   shell: bash
    #   run: |
    #     for i in $(echo ${{ inputs.architectures }} | tr "," "\n")
    #     do
    #       echo "::group::Running 'go vet' for '$i'"
    #       GOOS=${i%/*} GOARCH=${i#*/} go vet
    #       echo "::endgroup::"
    #     done

    # - name: Run StaticCheck
    #   uses: dominikh/staticcheck-action@v1.2.0
    #   with:
    #     version: latest
    #     install-go: false

    # - name: Run tests
    #   shell: bash
    #   run: |
    #     for i in $(echo ${{ inputs.architectures }} | tr "," "\n")
    #     do
    #       echo "::group::Running 'test vet' for '$i'"
    #       GOOS=${i%/*} GOARCH=${i#*/} go test
    #       echo "::endgroup::"
    #     done